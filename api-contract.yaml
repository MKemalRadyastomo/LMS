openapi: 3.0.3
info:
  title: Online Learning Platform API
  description: API for managing users, roles, courses, enrollments, content, assignments, and progress in an online learning system with RBAC.
  version: 1.0.0
  contact:
    name: LMS Development Team
    email: dev@lms.com
servers:
  - url: https://api.onlinelearning.com/v{version}
    variables:
      version:
        enum:
          - '1'
          - '2'
        default: '1'
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.lms.com/v1
    description: Production server

security:
  - bearerAuth: []

paths:
  /api-version:
    get:
      summary: Get API version information
      security: []
      tags:
        - System
      responses:
        '200':
          description: API version information
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  release_date:
                    type: string
                  format: date
                  deprecated:
                    type: boolean
                  sunset_date:
                    type: string
                    format: date
                    nullable: true
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'

  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required: [username, password]
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token
                  user_id:
                    type: integer
                    description: ID of authenticated user
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: User registration
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: User logout
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      summary: List users
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          description: Filter users by role
          schema:
            type: string
        - name: search
          in: query
          description: Search users by name or email
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [username, email, created_at]
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPublic'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      summary: Create user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/bulk:
    post:
      summary: Create multiple users at once
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserCreate'
              required: [users]
      responses:
        '201':
          description: Users created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success_count:
                    type: integer
                  failed_count:
                    type: integer
                  created_users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPublic'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        error:
                          type: string
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get user by ID
      tags:
        - Users
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update user by ID
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete user by ID
      tags:
        - Users
      responses:
        '204':
          description: User deleted
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{id}/profile-picture:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      summary: Upload or update user profile picture
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile_picture:
                  type: string
                  format: binary
                  description: Image file for profile picture (max 2MB, jpg, png, gif)
              required:
                - profile_picture
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile_picture_url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          description: File size too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: Unsupported file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /roles:
    get:
      summary: List roles
      tags:
        - Roles
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      summary: Create role
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /roles/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get role by ID
      tags:
        - Roles
      responses:
        '200':
          description: Role data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update role
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdate'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete role
      tags:
        - Roles
      responses:
        '204':
          description: Role deleted
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /roles/assign:
    post:
      summary: Assign role to user
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                role_id:
                  type: integer
              required: [user_id, role_id]
      responses:
        '200':
          description: Role assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /roles/assign/bulk:
    post:
      summary: Assign roles to users in bulk
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                assignments:
                  type: array
                  items:
                    type: object
                    properties:
                      user_id:
                        type: integer
                      role_id:
                        type: integer
                    required: [user_id, role_id]
              required: [assignments]
      responses:
        '200':
          description: Roles assigned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success_count:
                    type: integer
                  failed_count:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        error:
                          type: string
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /categories:
    get:
      summary: List course categories
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create category
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /courses:
    get:
      summary: List courses
      tags:
        - Courses
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: category_id
          in: query
          description: Filter by category
          schema:
            type: integer
        - name: instructor_id
          in: query
          description: Filter by instructor
          schema:
            type: integer
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [title, created_at, popularity]
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: A list of courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create course
      tags:
        - Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreate'
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /courses/bulk:
    post:
      summary: Create multiple courses at once
      tags:
        - Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courses:
                  type: array
                  items:
                    $ref: '#/components/schemas/CourseCreate'
              required: [courses]
      responses:
        '201':
          description: Courses created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success_count:
                    type: integer
                  failed_count:
                    type: integer
                  created_items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        error:
                          type: string
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'

  /courses/{course_id}/content:
    parameters:
      - name: course_id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get all content for a course
      tags:
        - Course Content
      responses:
        '200':
          description: Course content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Content'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Add content to course
      tags:
        - Course Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentCreate'
      responses:
        '201':
          description: Content created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /courses/{course_id}/content/bulk:
    parameters:
      - name: course_id
        in: path
        required: true
        schema:
          type: integer
    post:
      summary: Add multiple content items to course
      tags:
        - Course Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content_items:
                  type: array
                  items:
                    $ref: '#/components/schemas/ContentCreate'
              required: [content_items]
      responses:
        '201':
          description: Content items created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success_count:
                    type: integer
                  failed_count:
                    type: integer
                  created_items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        error:
                          type: string
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'

  /assignments:
    get:
      summary: List assignments for the authenticated student
      tags:
        - Assignments
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: course_id
          in: query
          description: Filter assignments by course
          schema:
            type: integer
        - name: status
          in: query
          description: Filter assignments by submission status (e.g., pending, submitted, graded)
          schema:
            type: string
            enum: [pending, submitted, graded]
        - name: due_date_before
          in: query
          description: Filter assignments due before a specific date
          schema:
            type: string
            format: date
        - name: due_date_after
          in: query
          description: Filter assignments due after a specific date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of assignments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Assignment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /assignments/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get assignment by ID
      tags:
        - Assignments
      responses:
        '200':
          description: Assignment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentDetail'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /assignments/{id}/submit/essay:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      summary: Submit an essay assignment
      tags:
        - Submissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EssaySubmissionCreate'
      responses:
        '201':
          description: Essay submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Assignment already submitted or past due
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/{id}/submit/file:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      summary: Submit a file upload assignment
      tags:
        - Submissions
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileSubmissionCreate'
      responses:
        '201':
          description: File submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Assignment already submitted or past due
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: File size too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: Unsupported file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/{id}/submit/quiz:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      summary: Submit a quiz assignment
      tags:
        - Submissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizSubmissionCreate'
      responses:
        '201':
          description: Quiz submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Assignment already submitted or past due
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /assignments/{id}/submissions:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get all submissions for a specific assignment
      tags:
        - Submissions
      responses:
        '200':
          description: A list of submissions for the assignment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Submission'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /submissions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get submission by ID
      tags:
        - Submissions
      responses:
        '200':
          description: Submission data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update submission by ID (e.g., for draft saving)
      tags:
        - Submissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionUpdate'
      responses:
        '200':
          description: Submission updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/X-RateLimit-Reset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          example: '400'
        message:
          type: string
          example: Bad Request
      required:
        - code
        - message
    Pagination:
      type: object
      properties:
        total_items:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10
        current_page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
      required:
        - total_items
        - total_pages
        - current_page
        - page_size
    UserPublic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        first_name:
          type: string
          nullable: true
          example: John
        last_name:
          type: string
          nullable: true
          example: Doe
        role_id:
          type: integer
          description: ID of the assigned role
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - username
        - email
        - role_id
    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: janedoe
        email:
          type: string
          format: email
          example: jane.doe@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: securepassword123
        first_name:
          type: string
          nullable: true
          example: Jane
        last_name:
          type: string
          nullable: true
          example: Doe
        role_id:
          type: integer
          description: ID of the role to assign (e.g., 1 for student, 2 for instructor)
      required:
        - username
        - email
        - password
        - role_id
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: janedoe_new
        email:
          type: string
          format: email
          example: jane.new@example.com
        first_name:
          type: string
          nullable: true
          example: Jane
        last_name:
          type: string
          nullable: true
          example: New
        role_id:
          type: integer
          description: ID of the role to assign (e.g., 1 for student, 2 for instructor)
    Role:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          example: student
        description:
          type: string
          nullable: true
          example: Can enroll in courses and submit assignments
        permissions:
          type: array
          items:
            type: string
          example: [read:course, submit:assignment]
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - name
        - permissions
    RoleCreate:
      type: object
      properties:
        name:
          type: string
          example: new_role
        description:
          type: string
          nullable: true
          example: Description for new role
        permissions:
          type: array
          items:
            type: string
          example: [read:all, write:all]
      required:
        - name
        - permissions
    RoleUpdate:
      type: object
      properties:
        name:
          type: string
          example: updated_role
        description:
          type: string
          nullable: true
          example: Updated description
        permissions:
          type: array
          items:
            type: string
          example: [read:course, update:course]
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          example: Programming
        description:
          type: string
          nullable: true
          example: Courses related to programming languages and software development
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - name
    CategoryCreate:
      type: object
      properties:
        name:
          type: string
          example: Data Science
        description:
          type: string
          nullable: true
          example: Courses related to data analysis and machine learning
      required:
        - name
    Course:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          example: Introduction to Python
        description:
          type: string
          nullable: true
          example: Learn the basics of Python programming.
        category_id:
          type: integer
        instructor_id:
          type: integer
        status:
          type: string
          enum: [draft, published, archived]
          default: draft
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - title
        - category_id
        - instructor_id
    CourseCreate:
      type: object
      properties:
        title:
          type: string
          example: Advanced JavaScript
        description:
          type: string
          nullable: true
          example: Deep dive into modern JavaScript features.
        category_id:
          type: integer
        instructor_id:
          type: integer
        status:
          type: string
          enum: [draft, published, archived]
          default: draft
      required:
        - title
        - category_id
        - instructor_id
    CourseUpdate:
      type: object
      properties:
        title:
          type: string
          example: Advanced JavaScript (Updated)
        description:
          type: string
          nullable: true
          example: Deep dive into modern JavaScript features and frameworks.
        category_id:
          type: integer
        instructor_id:
          type: integer
        status:
          type: string
          enum: [draft, published, archived]
    CourseDetail:
      allOf:
        - $ref: '#/components/schemas/Course'
        - type: object
          properties:
            category:
              $ref: '#/components/schemas/Category'
            instructor:
              $ref: '#/components/schemas/UserPublic'
            content_count:
              type: integer
              example: 5
            enrollment_count:
              type: integer
              example: 20
    Content:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        course_id:
          type: integer
        title:
          type: string
          example: Introduction to Variables
        type:
          type: string
          enum: [lecture, quiz, assignment, material]
        content_url:
          type: string
          format: uri
          nullable: true
          example: https://example.com/lecture1.mp4
        text_content:
          type: string
          nullable: true
          example: This lecture covers basic variable types.
        order:
          type: integer
          description: Order of content within the course
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - course_id
        - title
        - type
        - order
    ContentCreate:
      type: object
      properties:
        title:
          type: string
          example: Functions in Python
        type:
          type: string
          enum: [lecture, quiz, assignment, material]
        content_url:
          type: string
          format: uri
          nullable: true
          example: https://example.com/functions.pdf
        text_content:
          type: string
          nullable: true
          example: This content explains how to define and use functions.
        order:
          type: integer
          description: Order of content within the course
      required:
        - title
        - type
        - order
    Assignment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        course_id:
          type: integer
        title:
          type: string
          example: Essay on World War II
        description:
          type: string
          nullable: true
          example: Write a 1000-word essay on the causes and effects of World War II.
        type:
          type: string
          enum: [essay, file_upload, quiz]
        due_date:
          type: string
          format: date-time
        max_score:
          type: number
          format: float
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - course_id
        - title
        - type
        - due_date
    AssignmentDetail:
      allOf:
        - $ref: '#/components/schemas/Assignment'
        - type: object
          properties:
            content:
              type: object
              description: Details specific to the assignment type
              oneOf:
                - type: object
                  properties:
                    essay_prompt:
                      type: string
                      example: Discuss the socio-economic impacts of the Industrial Revolution.
                  required: [essay_prompt]
                - type: object
                  properties:
                    allowed_file_types:
                      type: array
                      items:
                        type: string
                      example: [pdf, docx, jpg]
                    max_file_size_mb:
                      type: number
                      format: float
                      example: 5
                  required: [allowed_file_types, max_file_size_mb]
                - type: object
                  properties:
                    questions:
                      type: array
                      items:
                        $ref: '#/components/schemas/QuizQuestion'
                  required: [questions]
    EssaySubmissionCreate:
      type: object
      properties:
        answer_text:
          type: string
          description: The student's essay answer.
          example: The Industrial Revolution brought about profound changes...
        draft:
          type: boolean
          default: false
          description: Set to true to save as draft, false to finalize submission.
      required:
        - answer_text
    FileSubmissionCreate:
      type: object
      properties:
        submitted_file:
          type: string
          format: binary
          description: The file uploaded by the student.
        draft:
          type: boolean
          default: false
          description: Set to true to save as draft, false to finalize submission.
      required:
        - submitted_file
    QuizSubmissionCreate:
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/QuizAnswer'
        draft:
          type: boolean
          default: false
          description: Set to true to save as draft, false to finalize submission.
      required:
        - answers
    Submission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        assignment_id:
          type: integer
        student_id:
          type: integer
        submission_time:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum: [draft, submitted, graded, late]
          default: draft
        grade:
          type: number
          format: float
          nullable: true
        feedback:
          type: string
          nullable: true
        submission_content:
          type: object
          description: Content of the submission based on assignment type
          oneOf:
            - type: object
              properties:
                answer_text:
                  type: string
            - type: object
              properties:
                file_url:
                  type: string
                  format: uri
            - type: object
              properties:
                quiz_answers:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: integer
                      answer:
                        type: string
        plagiarism_score:
          type: number
          format: float
          nullable: true
          description: Percentage of plagiarism detected for essay submissions.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - assignment_id
        - student_id
        - submission_time
        - status
    SubmissionUpdate:
      type: object
      properties:
        answer_text:
          type: string
          description: Updated essay answer.
        submitted_file:
          type: string
          format: binary
          description: Updated file.
        answers:
          type: array
          items:
            $ref: '#/components/schemas/QuizAnswer'
        draft:
          type: boolean
          description: Set to true to save as draft, false to finalize submission.
    QuizQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question_text:
          type: string
        type:
          type: string
          enum: [multiple_choice, true_false, short_answer]
        options:
          type: array
          items:
            type: string
          nullable: true
          description: For multiple_choice questions
        correct_answer:
          type: string
          nullable: true
          description: For auto-graded quizzes
      required:
        - id
        - question_text
        - type
    QuizAnswer:
      type: object
      properties:
        question_id:
          type: integer
        answer:
          type: string
          description: The student's answer to the question.
      required:
        - question_id
        - answer
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
  responses:
    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: '401'
              message: Unauthorized
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: '403'
              message: Forbidden
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: '404'
              message: Not Found
    BadRequest:
      description: Invalid input or bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            example:
              code: '400'
              message: Bad Request
  headers:
    X-RateLimit-Limit:
      description: The maximum number of requests that the consumer is permitted to make per hour.
      schema:
        type: integer
    X-RateLimit-Remaining:
      description: The number of requests remaining in the current rate limit window.
      schema:
        type: integer
    X-RateLimit-Reset:
      description: The time at which the current rate limit window resets in UTC epoch seconds.
      schema:
        type: integer
tags:
  - name: System
    description: API version and health checks
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User management operations
  - name: Roles
    description: Role and permission management
  - name: Categories
    description: Course categories management
  - name: Courses
    description: Course management operations
  - name: Course Content
    description: Managing content within courses
  - name: Assignments
    description: Assignment management and retrieval
  - name: Submissions
    description: Student assignment submissions
